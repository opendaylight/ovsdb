{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_96c7a363",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/reconciliation/ReconciliationManager.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-03-11T03:27:57Z",
      "side": 1,
      "message": "Looking at this some more, this is the only task that you run on the thread pool and it runs permanently. So essentially you\u0027re doing your own queuing via reconciliationTasksQueue, which is unbounded, with a single thread. So the setup of max threads and queue size on the \"reconcilers\" executor isn\u0027t really doing anything as it\u0027s essentially a single thread executor.\n\nI think what you want to do is make ReconciliationTask Runnable and enqueue on the \"reconcilers\" executor.  If a ReconciliationTask fails, have it submit a Runnable to the scheduled executor for retry (one-time schedule), unless the max retries is reached in which case stop. You could create an abstract base class for ReconciliationTask to handle this logic, with abstract method reconcileConfiguration. The Runnable submitted to the scheduled executor would simply enqueue on the \"reconcilers\" executor. \n\nSo the \"reconcilers\" executor would handle the parallel reconciliation work and the single-threaded scheduled executor would be used to time the retries and submit the work to the \"reconcilers\" executor for parallelism. I\u0027ve used this pattern before. \n\nThis would simplify it and you could get rid of the 2 unbounded queues (reconciliationTasksQueue and retryConnectionTaskCache).\n\nYou could also do this with just a scheduled executor with 10 threads and set allowCoreThreadTimeOut  and keepAliveTime to clean them up when idle. However the queue is unbounded in scheduled executor so it\u0027s not really ideal for blocking and/or potential long running tasks..",
      "revId": "1d571c46936e7775391f66455c92a420013d3810",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_168393cc",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/reconciliation/ReconciliationManager.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 65
      },
      "writtenOn": "2016-03-11T08:34:01Z",
      "side": 1,
      "message": "Agree, feeling bit stupid that i missed that only on thread is used from reconciler pool :). I tried to restructure a bit to make it bit simple and make it parallel based on your suggestion, but i think we can\u0027t get rid of retryConnectionTaskCache, because what i want is, periodically someone come and check if it\u0027s time for connection retry or not for the disconnected devices, so with single scheduled thread, it will just pick up one task and execute and again go back sleep and execute after second task after 10 second, in that way, connection retry task for second device will be executed after 20 seconds, but both the devices were disconnected from controller at same time. And we want to retry device connection in t1\u003d10 (1st attempt), t2\u003d30 (2nd attempt), t3\u003d60 (3rd attempt), t4\u003d100 (4th attempt). So there is a possibility that the thread comes after 10 seconds and it will see that the task is still not ready for the retry, so it doesn\u0027t submit it to reconciler. Even if we use multiple scheduled thread, i think we won\u0027t achieve that. Let me know if i am missing something interesting, that can solve this problem.",
      "parentUuid": "9a3d3df0_96c7a363",
      "revId": "1d571c46936e7775391f66455c92a420013d3810",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_cc9ebcb8",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/reconciliation/ReconciliationManager.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-03-11T14:52:04Z",
      "side": 1,
      "message": "I\u0027m not sure I follow exactly. Perhaps you can explain on hangout. It sounds like you want to increase the timeout period after each execution (and failure). You can do that by re-submitting a one-shot timer task each time with a different delay instead of using a repeated, fixed rate timer.",
      "parentUuid": "9a3d3df0_168393cc",
      "revId": "1d571c46936e7775391f66455c92a420013d3810",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d62f6b3d",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/reconciliation/ReconciliationManager.java",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1842
      },
      "writtenOn": "2016-03-11T03:27:57Z",
      "side": 1,
      "message": "These 2 lines could be combined but not a big deal.",
      "revId": "1d571c46936e7775391f66455c92a420013d3810",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}