{
  "comments": [
    {
      "key": {
        "uuid": "fa57193c_c706efcd",
        "filename": "library/impl/src/main/java/org/opendaylight/ovsdb/lib/impl/OvsdbConnectionService.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T13:36:01Z",
      "side": 1,
      "message": "add a space here for checkstyle and format happiness",
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_6c5eea13",
        "filename": "library/impl/src/main/java/org/opendaylight/ovsdb/lib/impl/OvsdbConnectionService.java",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T07:16:24Z",
      "side": 1,
      "message": "are these ok?  they were helping me debug in jconsole, but I can remove them if they are not good.",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 298,
        "endChar": 114
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_478adfbf",
        "filename": "library/impl/src/main/java/org/opendaylight/ovsdb/lib/impl/OvsdbConnectionService.java",
        "patchSetId": 2
      },
      "lineNbr": 298,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T13:36:01Z",
      "side": 1,
      "message": "this is good. We use the same idea in the southbound to track the threads. There is a default ThreadFactory behind the Executor already.\n\nMaybe we should name this threadFactory more descriptive. I realize it is different than the one in the sslConnect method.",
      "parentUuid": "fa57193c_6c5eea13",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 298,
        "endChar": 114
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_27852bad",
        "filename": "library/impl/src/main/java/org/opendaylight/ovsdb/lib/impl/OvsdbConnectionService.java",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T13:36:01Z",
      "side": 1,
      "message": "Do you have an idea on what the differences in the number of threads used and the different uses are? Like we use 3 for each connection - is that a requirement of the netty bootstrap?\n\nWhy do we use fixedThreadPool and not cached? Does it matter?\n\nIs 10 enough for the ssl stuff? Why is 10 used?",
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_1d783a2a",
        "filename": "library/impl/src/main/java/org/opendaylight/ovsdb/lib/impl/OvsdbConnectionService.java",
        "patchSetId": 2
      },
      "lineNbr": 299,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T17:41:22Z",
      "side": 1,
      "message": "I have no idea why 10 and 3 were used.  Probably need someone more expert in this area to give us a good reason to use different numbers.",
      "parentUuid": "fa57193c_27852bad",
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_6c68aa87",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T07:25:51Z",
      "side": 1,
      "message": "unit test is failing on this line.  error below.  The change\nhere is calling the get() that takes a timeout now.  it still returns a List like it did before, but the error is\nabout casting to java.util.List.\n\nnot sure...\n\n\njava.lang.ClassCastException: org.powermock.api.mockito.repackaged.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7421ee41 cannot be cast to java.util.List",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 87
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_47b13f8e",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T13:36:01Z",
      "side": 1,
      "message": "We can fix the test, Maybe just because the timeout is added we just need to change the when().\n\nBut the timeout value might be an issue. I have no idea if 1s is appropriate. If I recall correctly, this ends up as a list_dbs and could be an rpc to the node itself. This could easily take more than 1s in some cases.\n\nDo you find that this call blocks? Maybe we need something deeper down in the JsonRpcEndpoint#processRequesst() that returns if there isn\u0027t a connection or knows more if the connection isn\u0027t good so that it doesn\u0027t block.",
      "range": {
        "startLine": 109,
        "startChar": 58,
        "endLine": 109,
        "endChar": 62
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_7d77b63a",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T17:41:22Z",
      "side": 1,
      "message": "I fixed the test.",
      "parentUuid": "fa57193c_47b13f8e",
      "range": {
        "startLine": 109,
        "startChar": 58,
        "endLine": 109,
        "endChar": 62
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_8c21befd",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 65
      },
      "writtenOn": "2016-05-25T09:03:38Z",
      "side": 1,
      "message": "you can probably call externalClient.disconnect() here.",
      "range": {
        "startLine": 117,
        "startChar": 12,
        "endLine": 117,
        "endChar": 41
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_27736be8",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T13:36:01Z",
      "side": 1,
      "message": "Agreed, it seems like we need to disconnect() to clean up this connection. Calling disconnected() assumes the remote side or the lib disconnected - which means the lib should have called disconnected().\n\ncould we call the disconnect() method rather than externalClient.disconnect()",
      "parentUuid": "fa57193c_8c21befd",
      "range": {
        "startLine": 117,
        "startChar": 12,
        "endLine": 117,
        "endChar": 41
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_9d93aa4e",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T17:41:22Z",
      "side": 1,
      "message": "externalClient.disconnect() did not work for me.  It would close the socket, but it seems the underlying issue that\u0027s\nblocking the threads was not resolved.\n\ndisconnect() takes an OvsdbNode, which I don\u0027t think we have here.  disconnected() takes an OvsdbClient which is what we do have.\n\nwhat do you think?",
      "parentUuid": "fa57193c_27736be8",
      "range": {
        "startLine": 117,
        "startChar": 12,
        "endLine": 117,
        "endChar": 41
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_18c0487b",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 773
      },
      "writtenOn": "2016-05-25T20:10:28Z",
      "side": 1,
      "message": "we can get the node if we have the client or connection info which we have:\n\ngetInstanceIdentifier() has some code. Also in disconnected() the call for getConnectionInstance() returns the ConnectionInstance() and you can call getOvsdbNodeAugmentation() to get the node. Or just read the node based on the connectioninstance with:\n\nConnectionInfo key \u003d SouthboundMapper.createConnectionInfo(externalClient);\n        OvsdbConnectionInstance ovsdbConnectionInstance \u003d getConnectionInstance(key);\n\nCheckedFuture\u003cOptional\u003cNode\u003e, ReadFailedException\u003e ovsdbNodeFuture \u003d transaction.read(\n                LogicalDatastoreType.OPERATIONAL, ovsdbConnectionInstance().getInstanceIdentifier());\n\nThen you would",
      "parentUuid": "fa57193c_9d93aa4e",
      "range": {
        "startLine": 117,
        "startChar": 12,
        "endLine": 117,
        "endChar": 41
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa57193c_6cb54a30",
        "filename": "southbound/southbound-impl/src/main/java/org/opendaylight/ovsdb/southbound/OvsdbConnectionManager.java",
        "patchSetId": 2
      },
      "lineNbr": 118,
      "author": {
        "id": 2264
      },
      "writtenOn": "2016-05-25T07:16:24Z",
      "side": 1,
      "message": "my logic here was to let getDatabases() timeout if no good/valid response was coming back.  I picked 1s (1000ms) out the air.  If any of the exceptions are thrown, calling\ndisconnected() seems to unblock whatever it was that was\nblocking new connections after we had 10 of these incorrect\nconnections.\n\nI also moved the callback and Entity stuff in to the \nhappy path of the try/catch.",
      "range": {
        "startLine": 108,
        "startChar": 0,
        "endLine": 118,
        "endChar": 9
      },
      "revId": "9156f041350d9fb242635b6b9e92da1e18cfb444",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}