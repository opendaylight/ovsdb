<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2014 Red Hat, Inc. and others. All rights reserved.

This program and the accompanying materials are made available under the
terms of the Eclipse Public License v1.0 which accompanies this distribution,
and is available at http://www.eclipse.org/legal/epl-v10.html
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.opendaylight.controller</groupId>
    <artifactId>config-parent</artifactId>
    <version>0.4.0-SNAPSHOT</version>
    <relativePath/>
  </parent>

  <groupId>org.opendaylight.ovsdb</groupId>
  <artifactId>openstack.net-virt</artifactId>
  <version>1.2.0-SNAPSHOT</version>
  <packaging>bundle</packaging>
  <description>The OVSDB Plugin integration project is a project for OpenDaylight that will implement the Open vSwitch Database RFC 7047 management protocol allowing the Southbound configuration of vSwitches and a network virtualization implementation.</description>
  <url>https://wiki.opendaylight.org/view/OVSDB_Integration:Main</url>
  <licenses>
    <license>
      <name>Eclipse Public License v1.0</name>
      <url>http://www.eclipse.org/legal/epl-v10.html</url>
    </license>
  </licenses>
  <developers>
    <developer>
      <name>Sam Hague</name>
      <email>shague@gmail.com</email>
      <url>https://github.com/shague</url>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:ssh://git.opendaylight.org:29418/ovsdb.git</connection>
    <developerConnection>scm:git:ssh://git.opendaylight.org:29418/ovsdb.git</developerConnection>
    <tag>HEAD</tag>
    <url>https://wiki.opendaylight.org/view/OVSDB_Integration:Main</url>
  </scm>

  <properties>
    <networkconfig.neutron.version>0.6.0-SNAPSHOT</networkconfig.neutron.version>
    <ovsdb.utils.config.version>1.2.0-SNAPSHOT</ovsdb.utils.config.version>
    <ovsdb.utils.servicehelper.version>1.2.0-SNAPSHOT</ovsdb.utils.servicehelper.version>
    <powermock.version>1.5.2</powermock.version>
    <sonar-jacoco-listeners.version>2.4</sonar-jacoco-listeners.version>
    <root.directory>${env.PWD}</root.directory>
    <sonar.jacoco.itReportPath>${root.directory}/target/code-coverage/jacoco-it.exec</sonar.jacoco.itReportPath>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.controller</groupId>
      <artifactId>config-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.controller</groupId>
      <artifactId>sal-binding-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.controller</groupId>
      <artifactId>sal-binding-config</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.controller</groupId>
      <artifactId>sal-common-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.neutron</groupId>
      <artifactId>neutron-spi</artifactId>
      <version>${networkconfig.neutron.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.ovsdb</groupId>
      <artifactId>southbound-api</artifactId>
      <version>1.2.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.ovsdb</groupId>
      <artifactId>utils.config</artifactId>
      <version>${ovsdb.utils.config.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.ovsdb</groupId>
      <artifactId>utils.servicehelper</artifactId>
      <version>${ovsdb.utils.servicehelper.version}</version>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools</groupId>
      <artifactId>yang-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools</groupId>
      <artifactId>concepts</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools.model</groupId>
      <artifactId>ietf-inet-types</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools.model</groupId>
      <artifactId>ietf-topology</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools.model</groupId>
      <artifactId>opendaylight-l2-types</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools.model</groupId>
      <artifactId>ietf-yang-types-20130715</artifactId>
    </dependency>
    <dependency>
      <groupId>org.opendaylight.yangtools.model</groupId>
      <artifactId>ietf-yang-types</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-core</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-module-junit4</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-mockito</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-api-support</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.powermock</groupId>
      <artifactId>powermock-reflect</artifactId>
      <version>${powermock.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.sonar-plugins.java</groupId>
      <artifactId>sonar-jacoco-listeners</artifactId>
      <version>${sonar-jacoco-listeners.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Embed-Dependency>utils.config;type=!pom;inline=false</Embed-Dependency>
            <Embed-Transitive>true</Embed-Transitive>
            <Export-Package>
              org.opendaylight.ovsdb.openstack.netvirt.api,
              org.opendaylight.ovsdb.openstack.netvirt
            </Export-Package>
          </instructions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- Specific to generate mapping between tests and covered code -->
          <!--<argLine>${jacoco.agent.it.arg}</argLine>-->
          <properties>
            <property>
              <name>listener</name>
              <value>org.sonar.java.jacoco.JUnitListener</value>
            </property>
          </properties>
          <!-- Let's put failsafe reports with surefire to have access to tests failures/success reports in sonar -->
          <!--<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>-->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Specific to generate mapping between tests and covered code -->
          <!--<argLine>${jacoco.agent.ut.arg}</argLine>-->
          <properties>
            <property>
              <name>listener</name>
              <value>org.sonar.java.jacoco.JUnitListener</value>
            </property>
          </properties>
          <!-- Let's put failsafe reports with surefire to have access to tests failures/success reports in sonar -->
          <!--<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>-->
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>prepare-ut-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${sonar.jacoco.reportPath}</destFile>
            </configuration>
          </execution>
          <execution>
            <id>prepare-it-agent</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
            <configuration>
              <append>true</append>
              <destFile>${sonar.jacoco.itReportPath}</destFile>
            </configuration>
          </execution>
          <execution>
            <id>default-report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${sonar.jacoco.reportPath}</dataFile>
            </configuration>
          </execution>
          <execution>
            <id>default-report-integration</id>
            <goals>
              <goal>report-integration</goal>
            </goals>
            <configuration>
              <dataFile>${sonar.jacoco.itReportPath}</dataFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  </project>
