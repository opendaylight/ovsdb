/*
 * Copyright (C) 2014 Red Hat, Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 */
package org.opendaylight.ovsdb.schema.openvswitch;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

import com.google.common.util.concurrent.ListenableFuture;
import junit.framework.Assert;
import org.junit.Before;
import org.junit.Test;
import org.opendaylight.ovsdb.lib.message.UpdateNotification;
import org.opendaylight.ovsdb.lib.notation.Mutator;
import org.opendaylight.ovsdb.lib.notation.UUID;
import org.opendaylight.ovsdb.lib.operations.OperationResult;
import org.opendaylight.ovsdb.lib.operations.TransactionBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

import static org.opendaylight.ovsdb.lib.operations.Operations.op;

public class QueueTestCases extends OpenVswitchSchemaTestBase {
    Logger logger = LoggerFactory.getLogger(QueueTestCases.class);

    @Before
    public void setUp() throws ExecutionException, InterruptedException, TimeoutException, IOException {
        super.setUp();
    }

    @Test
    public void testCreateTypedQueueTable() throws InterruptedException, ExecutionException, IllegalArgumentException {
        /**
         * This is an arbitrary String that is a placeholder for
         * the future UUID generated by the OVSDB Server in the
         * future transaction. While it is possible to generate
         * ones own UUID for the transaction it is not recommended
         * since it wouldn't add any conceivable value.
         */
        String queueUuidStr = "queueUuidStr";
        Long dscpVal = Long.valueOf(4);
        Queue queue = ovs.createTypedRowWrapper(Queue.class);
        // Example of explicit ImmutableSet/Map Attribute declaration
        ImmutableSet<Long> dscp = ImmutableSet.of(dscpVal);
        ImmutableMap<String, String> externalIds = ImmutableMap.of("little", "coat");
        // Example of condensing the attributes bindings in one line
        queue.setOtherConfig(ImmutableMap.of("war", "onfun"));
        // Bind the Attributes to the transaction. These values end up in columns.
        queue.setExternalIds(externalIds);
        queue.setDscp(dscp);
        // Get the parent Qos table row UUID to insert the queue.
        Qos qos = ovs.getTypedRowWrapper(Qos.class, null);
        // Queue key that is mapped to the queue record/value/ofp_action_enqueue
        Long queueKey = 0L;
        // The transaction index for the Queue insert is used to store the Queue UUID
        int insertQueueOperationIndex = 0;
        // Reference the Port row to insert the Queue with UID or Port name
        TransactionBuilder transactionBuilder = ovs.transactBuilder(OpenVswitchSchemaSuiteIT.dbSchema)
                .add(op.insert(queue.getSchema())
                        .withId(queueUuidStr)
                        .value(queue.getDscpColumn())
                        .value(queue.getExternalIdsColumn())
                        .value(queue.getOtherConfigColumn()))
                .add(op.mutate(qos.getSchema())
                        .addMutation(qos.getQueuesColumn().getSchema(), Mutator.INSERT,
                                ImmutableMap.of(queueKey, new UUID(queueUuidStr)))
                        .where(qos.getUuidColumn().getSchema()
                                .opEqual(OpenVswitchSchemaSuiteIT.getTestQosUuid()))
                        .build());

        ListenableFuture<List<OperationResult>> results = transactionBuilder.execute();
        List<OperationResult> operationResults = results.get();
        Assert.assertFalse(operationResults.isEmpty());
        for (OperationResult result : operationResults) {
            Assert.assertNull(result.getError());
        }
        // Store the returned Queue row UUID to be used in the TearDown deletion transaction
        OperationResult operationResult = operationResults.get(insertQueueOperationIndex);
        OpenVswitchSchemaSuiteIT.setTestQueueUuid(operationResult.getUuid());
        // Check if Results matches the number of operations in transaction
        Assert.assertEquals(transactionBuilder.getOperations().size(), operationResults.size());
        logger.info("Insert & Mutate operation results for Queue = {} ", operationResults);

    }

    @Override
    public void update(Object context, UpdateNotification upadateNotification) {

    }

    @Override
    public void locked(Object context, List<String> ids) {

    }

    @Override
    public void stolen(Object context, List<String> ids) {

    }
}
